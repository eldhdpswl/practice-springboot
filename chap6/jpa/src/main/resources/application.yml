# 싷행순서
#  기본적으로 빌드단계에서 설정할 파일을 정의할떄 active에 들어간 이름이 profile의 이름이다.
#  profile의 이름에 따라서 application-(profile명).yml 을 한다.

# 같은 설정값을 여러번 정의를 하게되면 마지막에 들어온 들어온 설정이 실행이 된다.

## 어떤 profiles을 사용해서 어플리케이션을 실행할지를(active) 보여준다.
spring:
  profiles:
    active: test

# logging level root 는 전체 애플리케이션에 적용된다.
# 프레임워크 root의 계층에 따른 전체의 로그가 나온다.
logging:
  level:
    root: warn
    dev.eldhdpswl: info # 패키지명을 하면 패키지명에 해당하는 클래스들의 해당 레벨의 로그만 나온다.


custom:
  property:
    single: custom-property
    comlist: comma,sparated,list,to,value
    ncp:
      id: api-id
      key: api-key
      url: https://ncp.com/
# properties를 사용할떄
#  - custom.property.single
#  - custom.property.comlist

### 스프링부트가 필요로 하는 설정들
## jar 파일로 실행할떄
# 실제 jar파일을 사용할떄는  오른쪽에 Gradle 탭에서 jpa/Tasks/build/bootjar 를 더블클릭하면 왼쪽 파일 리스트목록에
# build에 libs에 jar파일이 생성된다.

# spring.prifiles.active=test  => yml파일이 아닌 properties파일일떄 작성

#  java -jar build/libs/jap-0.0.1-SNAPSHOT.jar 를 실행하면
#  application.yml 파일의 active를 확인하고 application-profile명.yml 을 찾아서 실행한다.

# 다른 profiles 을 사용하고 싶을때 명령어
#  java -Dspring.profiles.active=local -jar build/libs/jpa-0.0.1-SNAPSHOT.jar
#  java -jar build/libs/jpa-0.0.1-SNAPSHOT.jar (application.yml에 설정된 active에 나온 것으로 실행)

## 환경변수 전달 명령어
# export SPRING_PROFILES_ACTIVE=local
#  echo $SPRING_PROFILES_ACTIVE => local  (echo 명령어로 해당 변수에 무엇이 들어있나 확인가능하다.)
# 그리고 환경변수가 설정이 되어있다면  java -jar build/libs/jpa-0.0.1-SNAPSHOT.jar  를 통해서 active "local"이 실행된다.
# 그리고 이미 환경변수 설정을 해놨는데 바로 인자를 전달하는 방식으로 실행을 하게 되면 마지막에 들어온 profiles가 실행된다.
# 그래서  SPRING_PROFILES_ACTIVE=test java -jar build/libs/jpa-0.0.1-SNAPSHOT.jar 이렇게 하게 되면
#  마지막으로 전달된 profiles가 test가 설정된다.

## annotation으로 전달 방식
# 클래스에 Profile annotation을 사용을 하게되면, 어떤 bean을 먼저 사용할지, 어떤 상황에서 사용할지 결정하게된다.

# active: local일때)  java -jar build/libs/jpa-0.0.1-SNAPSHOT.jar 실행하면
# ProfileComponent 클래스에 @Profile("local") 이기 때문에  ProfileComponent가 실행된다.
# KafkaMQ 클래스에 @Profile("local")가 있기 떄문에 실행이된다.

# active: test일때)  java -jar build/libs/jap-0.0.1-SNAPSHOT.jar 실행하면
# RabbitMQ 클래스에 @Profile("!local") 이기 떄문에 실행이 된다.


### 스프링부트가 사용하는 설정이 아닌 개발자가 어플리케이션을 진행하기 위한 필요한 설정들을 넣는 방법

#custom:
#  property:
#    single: custom-property
#    comlist: comma,sparated,list,to,value
#    ncp:
#      id: api-id
#      key: api-key
#      url: https://ncp.com/

#// application.yml에서 custom.property.single 항목을 찾아서 customProperty 변수에 들어가게 된다.
#@Value("${custom.property.single}")
#private String customProperty;
#
#@Value("${custom.property.comlist}")
#private List<String> customCommaList;
#
#@Value("${custom.property.default:default-property}")
#private String propertyDefault;
#
#
#// @Value에 들어가는 값들은 기본적으로 bean이 생성되고 나서 들어가기 때문에 constructor에서 log를 찍어서 보는 거는 힘들다.
#// 그래서 @PostConstruct 를 사용해서 확인한다.
#@PostConstruct
#public void init(){
#//logger는 {} 안에 변수값이 들어간다. String Format이 적용되었다.
#logger.info("custom property: {}", customProperty);
#
#      for(String commaListItem: customCommaList){
#          logger.info("comma list item: {}", commaListItem);
#      }
#
#      logger.info("default property: {}", propertyDefault);
#}

